# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  masterBranchName: 'master'
  releaseBranchPrefix: 'release'
  azureSubscription: 'Visual Studio Professional(8ed54f74-e6c1-418d-80dc-81a6cfdd32ed)'
  appName: 'app-grc-demoapi'
  resourceGroupName: 'rg-grc-sandbox-001'
  dotnetSdkVersion: 3.x

schedules:
- cron: '0 3 * * *'
  displayName: Deploy every day at 3 A.M.
  branches:
    include:
    - release
  always: false 

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'Build'
    displayName: 'Build job'

    steps:
    - script: echo Building!

    # - task: UseDotNet@2
    #   displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
    #   inputs:
    #     version: '$(dotnetSdkVersion)'

    # - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
    #   displayName: 'Compile Sass assets'

    # - task: gulp@1
    #   displayName: 'Run gulp tasks'

    # - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
    #   displayName: 'Write build info'
    #   workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

    # - task: PublishPipelineArtifact@1
    #   inputs:
    #     targetPath: '$(Pipeline.Workspace)' 
    #     artifactName: '$(buildArtifactName)'

- stage: Test
  displayName: 'Running automated tests'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: TestOnWindows
    steps:
    - script: echo Testing on Windows!
  - job: TestOnLinux
    steps:
    - script: echo Testing on Linux!


- stage: 'Dev'
  displayName: 'Deploy to the Dev environment'
  dependsOn: Test
  condition: |
    and
    (
      succeeded(),
      or
      (
      eq(variables['Build.SourceBranchName'], variables['masterBranchName']),
      startsWith(variables['Build.SourceBranchName'], variables['releaseBranchPrefix'])
      )
    )
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    # creates an environment if it doesn't exist
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              #azureSubscription: 'Resource Manager - Tailspin - Space Game'
              azureSubscription: $(azureSubscription)
              appName: '$(appName)'
              appType: webAppLinux
              deployToSlotOrASE: true
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
              #package: $(Pipeline.Workspace)/**/*.zip
              slotName: dev

          - task: AzureAppServiceSettings@1
            displayName: 'App Service Settings - Dev'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: '$(appName)'
              resourceGroupName: $(resourceGroupName)
              slotName: 'dev'
              appSettings: |
                [
                  {
                    "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                    "value": "$(Key)",
                    "slotSetting": true
                  },
                  {
                    "name": "MYSQL_DATABASE_NAME",
                    "value": "$(DB_Name)", 
                    "slotSetting": true
                  }
                ]
              generalSettings: |
                [
                  {
                    "name": "WEBAPP_NAME",
                    "value": "$(WebApp_Name)",
                    "slotSetting": true
                  },
                  {
                    "name": "WEBAPP_PLAN_NAME",
                    "value": "$(WebApp_PlanName)",
                    "slotSetting": true
                  }
                ]
              connectionStrings: |
                [
                  {
                    "name": "MysqlCredentials",
                    "value": "$(MySQl_ConnectionString)",
                    "type": "MySql",
                    "slotSetting": true
                  }
                ]

- stage: 'QA'
  displayName: 'Deploy to the QA environment'
  dependsOn: Dev
  condition: |
    and
    (
      succeeded(),
      startsWith(variables['Build.SourceBranchName'], variables['releaseBranchPrefix'])
    )
  #condition: eq(variables['Build.Reason'], 'Schedule')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: QA
    # variables:
    # - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              #azureSubscription: 'Resource Manager - Tailspin - Space Game'
              azureSubscription: $(azureSubscription)
              appName: '$(appName)'
              appType: webAppLinux
              deployToSlotOrASE: true
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
              #package: $(Pipeline.Workspace)/**/*.zip
              slotName: qa

          - task: AzureAppServiceSettings@1
            displayName: 'App Service Settings - QA'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: '$(appName)'
              resourceGroupName: $(resourceGroupName)
              slotName: 'qa'
              appSettings: |
                [
                  {
                    "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                    "value": "$(Key)",
                    "slotSetting": true
                  },
                  {
                    "name": "MYSQL_DATABASE_NAME",
                    "value": "$(DB_Name)", 
                    "slotSetting": true
                  }
                ]
              generalSettings: |
                [
                  {
                    "name": "WEBAPP_NAME",
                    "value": "$(WebApp_Name)",
                    "slotSetting": true
                  },
                  {
                    "name": "WEBAPP_PLAN_NAME",
                    "value": "$(WebApp_PlanName)",
                    "slotSetting": true
                  }
                ]
              connectionStrings: |
                [
                  {
                    "name": "MysqlCredentials",
                    "value": "$(MySQl_ConnectionString)",
                    "type": "MySql",
                    "slotSetting": true
                  }
                ]


- stage: 'PreProd'
  displayName: 'Deploy to the PreProd environment'
  dependsOn: QA
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: staging
    # variables:
    # - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              #azureSubscription: 'Resource Manager - Tailspin - Space Game'
              azureSubscription: $(azureSubscription)
              appName: '$(appName)'
              appType: webAppLinux
              deployToSlotOrASE: true
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
              slotName: preprod

          - task: AzureAppServiceSettings@1
            displayName: 'App Service Settings - PreProd'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: '$(appName)'
              resourceGroupName: $(resourceGroupName)
              slotName: 'preprod'
              appSettings: |
                [
                  {
                    "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                    "value": "$(Key)",
                    "slotSetting": true
                  },
                  {
                    "name": "MYSQL_DATABASE_NAME",
                    "value": "$(DB_Name)", 
                    "slotSetting": true
                  }
                ]
              generalSettings: |
                [
                  {
                    "name": "WEBAPP_NAME",
                    "value": "$(WebApp_Name)",
                    "slotSetting": true
                  },
                  {
                    "name": "WEBAPP_PLAN_NAME",
                    "value": "$(WebApp_PlanName)",
                    "slotSetting": true
                  }
                ]
              connectionStrings: |
                [
                  {
                    "name": "MysqlCredentials",
                    "value": "$(MySQl_ConnectionString)",
                    "type": "MySql",
                    "slotSetting": true
                  }
                ]
          - task: AzureAppServiceSettings@1
            displayName: 'App Service Settings - Prod'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: '$(appName)'
              resourceGroupName: $(resourceGroupName)
              appSettings: |
                [
                  {
                    "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                    "value": "$(Key)",
                    "slotSetting": false
                  },
                  {
                    "name": "MYSQL_DATABASE_NAME",
                    "value": "$(DB_Name)", 
                    "slotSetting": false
                  }
                ]
              generalSettings: |
                [
                  {
                    "name": "WEBAPP_NAME",
                    "value": "$(WebApp_Name)",
                    "slotSetting": false
                  },
                  {
                    "name": "WEBAPP_PLAN_NAME",
                    "value": "$(WebApp_PlanName)",
                    "slotSetting": false
                  }
                ]
              connectionStrings: |
                [
                  {
                    "name": "MysqlCredentials",
                    "value": "$(MySQl_ConnectionString)",
                    "type": "MySql",
                    "slotSetting": true
                  }
                ]

- stage: 'Production'
  displayName: 'Swap PreProd with Production environment'
  dependsOn: PreProd
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: production
    # variables:
    # - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Swap Staging with Production'
            inputs:
              azureSubscription: $(azureSubscription)
              action: 'Swap Slots'
              resourceGroupName: $(resourceGroupName)
              sourceSlot: 'preprod'
              swapWithProduction: true
              webappName: '$(appName)'
              
