# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  azureSubscription: 'Visual Studio Professional(8ed54f74-e6c1-418d-80dc-81a6cfdd32ed)'
  appName: 'app-mjpdotnetcoreapitest'
  resourceGroupName: 'rg-mjpappservice-dev-003'
  buildArtifactName: 'mjpdotnetcoreapi-artifact'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - script: echo Building!
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)' # Update this to match your need
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
    - task: PublishBuildArtifacts@1
      displayName: Copy Artifacts
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: '$(buildArtifactName)'

- stage: Test
  jobs:
  - job: TestOnWindows
    steps:
    - script: echo Testing on Windows!
  - job: TestOnLinux
    steps:
    - script: echo Testing on Linux!

- stage: DeploytoStage
  jobs:
    # track deployments on the environment
  - deployment: DeployWeb
    displayName: deploy Web App
    pool:
      vmImage: 'ubuntu-latest'
    # creates an environment if it doesn't exist
    environment: 'staging'
    strategy:
      # default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:
          - script: echo Deploying to Azure App Service!
          # - task: DownloadBuildArtifacts@0
          #   inputs:
          #     buildType: 'current'
          #     downloadType: 'specific'
          #     downloadPath: '$(System.ArtifactsDirectory)'
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(appName)
              deployToSlotOrASE: true
              #package: $(System.ArtifactsDirectory)/**/*.zip
              package: $(Pipeline.Workspace)/**/*.zip
              slotName: staging
          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(appName)
              resourceGroupName: $(resourceGroupName)
              slotName: 'staging'
              appSettings: |
                [
                  {
                    "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                    "value": "$(Key)",
                    "slotSetting": true
                  },
                  {
                    "name": "MYSQL_DATABASE_NAME",
                    "value": "$(DB_Name)", 
                    "slotSetting": true
                  }
                ]
              generalSettings: |
                [
                  {
                    "name": "WEBAPP_NAME",
                    "value": "$(WebApp_Name)",
                    "slotSetting": true
                  },
                  {
                    "name": "WEBAPP_PLAN_NAME",
                    "value": "$(WebApp_PlanName)",
                    "slotSetting": true
                  }
                ]
              connectionStrings: |
                [
                  {
                    "name": "MysqlCredentials",
                    "value": "$(MySQl_ConnectionString)",
                    "type": "MySql",
                    "slotSetting": true
                  }
                ]


  # jobs:
  # - job: PublishArtifact
  #   steps:
  # - job: DeploytoAppService
  #   steps:
  #   - script: echo Deploying to Azure App Service!
  #   - task: DownloadBuildArtifacts@0
  #     inputs:
  #       buildType: 'current'
  #       downloadType: 'specific'
  #       downloadPath: '$(System.ArtifactsDirectory)'
  #   - task: AzureWebApp@1
  #     displayName: 'Azure Web App Deploy'
  #     inputs:
  #       azureSubscription: $(azureSubscription)
  #       appType: webAppLinux
  #       appName: $(appName)
  #       deployToSlotOrASE: true
  #       package: $(System.ArtifactsDirectory)/**/*.zip
  #       slotName: staging
  #   - task: AzureAppServiceSettings@1
  #     inputs:
  #       azureSubscription: $(azureSubscription)
  #       appName: $(appName)
  #       resourceGroupName: $(resourceGroupName)
  #       slotName: 'staging'
  #       appSettings: |
  #         [
  #           {
  #             "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
  #             "value": "$(Key)",
  #             "slotSetting": true
  #           },
  #           {
  #             "name": "MYSQL_DATABASE_NAME",
  #             "value": "$(DB_Name)", 
  #             "slotSetting": true
  #           }
  #         ]
  #       generalSettings: |
  #         [
  #           {
  #             "name": "WEBAPP_NAME",
  #             "value": "$(WebApp_Name)",
  #             "slotSetting": true
  #           },
  #           {
  #             "name": "WEBAPP_PLAN_NAME",
  #             "value": "$(WebApp_PlanName)",
  #             "slotSetting": true
  #           }
  #         ]
  #       connectionStrings: |
  #         [
  #           {
  #             "name": "MysqlCredentials",
  #             "value": "$(MySQl_ConnectionString)",
  #             "type": "MySql",
  #             "slotSetting": true
  #           }
  #         ]
   

# steps:

#### Build environment
# For example, to install the preview version of the 5.0.x SDK for building and 3.0.x for running tests that target .NET Core 3.0.x, add this snippet:

# - task: UseDotNet@2
#   inputs:
#     version: '5.0.x'
#     includePreviewVersions: true # Required for preview versions

# - task: UseDotNet@2
#   inputs:
#     version: '3.0.x'
#     packageType: runtime


#### Restore dependencies
# You can download NuGet packages from Azure Artifacts, NuGet.org, or some other external or internal NuGet repository.
# Note: In .NET Core SDK version 2.0 and newer, packages are restored automatically when running other commands such as dotnet build.

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'restore'
#     projects: '**/*.csproj'
#     feedsToUse: 'select'
#     vstsFeed: 'my-vsts-feed' # A series of numbers and letters


#### Build your project

# - task: DotNetCoreCLI@2
#   displayName: Build
#   inputs:
#     command: build
#     projects: '**/*.csproj'
#     arguments: '--configuration $(buildConfiguration)' # Update this to match your need

# You can also call the dotnet command directly
# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'


#### Run tests
# ...
# do this after your tests have run
# - script: dotnet test <test-project> --logger trx
# - task: PublishTestResults@2
#   condition: succeededOrFailed()
#   inputs:
#     testRunner: VSTest
#     testResultsFiles: '**/*.trx'


#### Collect code coverage
# See https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops


#### Package and deliver code

# - task: DotNetCoreCLI@2
#   displayName: Publish
#   inputs:
#     command: publish
#     publishWebProjects: True
#     arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#     zipAfterPublish: True

# - task: PublishBuildArtifacts@1
#   inputs:
#     pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
#     artifactName: 'myWebsiteName'


# You can also call the dotnet command directly
# - script: dotnet publish --output $(Build.ArtifactStagingDirectory)
#   displayName: 'dotnet publish -output $(Build.ArtifactStagingDirectory)'


#### Publish to a NuGet feed
# See https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops


#### Deploy Azure WebApp

# To staging slot
# - task: AzureWebApp@1
#   displayName: 'Azure Web App Deploy'
#   inputs:
#     azureSubscription: $(azureSubscription)
#     appType: webAppLinux
#     appName: $(appName)
#     deployToSlotOrASE: true
#     package: $(Build.ArtifactStagingDirectory)/**/*.zip
#     slotName: staging

# # Swap to production slot
# - task: AzureAppServiceManage@0
#   inputs:
#     azureSubscription: $(azureSubscription)
#     WebAppName: $(appName)
#     ResourceGroupName: $(resourceGroupName)
#     SourceSlot: staging
#     SwapWithProduction: true

