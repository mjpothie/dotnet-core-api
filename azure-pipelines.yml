# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  azureSubscription: 'Visual Studio Professional(8ed54f74-e6c1-418d-80dc-81a6cfdd32ed)'
  appName: 'app-mjpdotnetcoreapitest'
  resourceGroupName: 'rg-mjpappservice-dev-003'
  buildArtifactName: 'mjpdotnetcoreapi-artifact'

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - script: echo Building!
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)' # Update this to match your need
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)' 
        artifactName: '$(buildArtifactName)'

- stage: Test
  jobs:
  - job: TestOnWindows
    steps:
    - script: echo Testing on Windows!
  - job: TestOnLinux
    steps:
    - script: echo Testing on Linux!

- stage: DeploytoStage
  jobs:
    # track deployments on the environment
  - deployment: DeployWeb
    displayName: DeploytoStage
    pool:
      vmImage: 'ubuntu-latest'
    # creates an environment if it doesn't exist
    environment: 'staging'
    strategy:
      # default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:
          - script: echo Deploying to Azure App Service Staging!
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(appName)
              deployToSlotOrASE: true
              #package: $(System.ArtifactsDirectory)/**/*.zip
              package: $(Pipeline.Workspace)/**/*.zip
              slotName: staging
          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(appName)
              resourceGroupName: $(resourceGroupName)
              slotName: 'staging'
              appSettings: |
                [
                  {
                    "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                    "value": "$(Key)",
                    "slotSetting": true
                  },
                  {
                    "name": "MYSQL_DATABASE_NAME",
                    "value": "$(DB_Name)", 
                    "slotSetting": true
                  }
                ]
              generalSettings: |
                [
                  {
                    "name": "WEBAPP_NAME",
                    "value": "$(WebApp_Name)",
                    "slotSetting": true
                  },
                  {
                    "name": "WEBAPP_PLAN_NAME",
                    "value": "$(WebApp_PlanName)",
                    "slotSetting": true
                  }
                ]
              connectionStrings: |
                [
                  {
                    "name": "MysqlCredentials",
                    "value": "$(MySQl_ConnectionString)",
                    "type": "MySql",
                    "slotSetting": true
                  }
                ]

# - stage: DeploytoProd
#   jobs:
#   - deployment: DeployWeb
#     displayName: DeploytoProd
#     pool:
#       vmImage: 'ubuntu-latest'
#     # creates an environment if it doesn't exist
#     environment: 'production'
#     strategy:
#       # default deployment strategy, more coming...
#       runOnce:
#         deploy:
#           steps:
#           - script: echo Deploying to Azure App Service Production!
#           - task: AzureWebApp@1
#             displayName: 'Azure Web App Deploy'
#             inputs:
#               azureSubscription: $(azureSubscription)
#               appType: webAppLinux
#               appName: $(appName)
#               deployToSlotOrASE: false
#               package: $(Pipeline.Workspace)/**/*.zip

#         # Add custom prod appservice settings 